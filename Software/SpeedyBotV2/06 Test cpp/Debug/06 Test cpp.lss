
06 Test cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800100  00800100  000002b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e6f  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a62  00000000  00000000  000011fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000491  00000000  00000000  00001c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  000020f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d7  00000000  00000000  00002194  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001db  00000000  00000000  0000276b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002946  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 40 00 	jmp	0x80	; 0x80 <__dtors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000007c <__ctors_start>:
  7c:	7d 00       	.word	0x007d	; ????

0000007e <__ctors_end>:
  7e:	82 00       	.word	0x0082	; ????

00000080 <__dtors_end>:
  80:	11 24       	eor	r1, r1
  82:	1f be       	out	0x3f, r1	; 63
  84:	cf ef       	ldi	r28, 0xFF	; 255
  86:	d0 e1       	ldi	r29, 0x10	; 16
  88:	de bf       	out	0x3e, r29	; 62
  8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a0 e0       	ldi	r26, 0x00	; 0
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a1 31       	cpi	r26, 0x11	; 17
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	cf e3       	ldi	r28, 0x3F	; 63
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 0c 01 	call	0x218	; 0x218 <__tablejump2__>
  ac:	ce 33       	cpi	r28, 0x3E	; 62
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 12 01 	jmp	0x224	; 0x224 <__do_global_dtors>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:

Motor Motors;

int main(void)
{
	Motors.speed(100, 100);
  be:	44 e6       	ldi	r20, 0x64	; 100
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	64 e6       	ldi	r22, 0x64	; 100
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN5Motor5speedEii>
	Motors.direction(MOT_FWD, MOT_FWD);
  ce:	41 e0       	ldi	r20, 0x01	; 1
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN5Motor9directionEhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	83 ed       	ldi	r24, 0xD3	; 211
  de:	90 e3       	ldi	r25, 0x30	; 48
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x22>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x2c>
  ea:	00 00       	nop
	_delay_ms(1000);
	Motors.direction(MOT_BREAK, MOT_BREAK);
  ec:	40 e0       	ldi	r20, 0x00	; 0
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN5Motor9directionEhh>
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <main+0x3a>

000000fa <_GLOBAL__sub_I_Motors>:

#include <avr/io.h>
#include <util/delay.h>
#include "motor.h"

Motor Motors;
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	0e 94 bf 00 	call	0x17e	; 0x17e <_ZN5MotorC1Ev>
 102:	08 95       	ret

00000104 <_GLOBAL__sub_D_Motors>:
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 87 00 	call	0x10e	; 0x10e <_ZN5MotorD1Ev>
 10c:	08 95       	ret

0000010e <_ZN5MotorD1Ev>:
}

// Destructor
Motor::~Motor()
{
	DDRC &= ~((1<<PINC2) | (1<<PINC3) | (1<<PINC4));
 10e:	87 b1       	in	r24, 0x07	; 7
 110:	83 7e       	andi	r24, 0xE3	; 227
 112:	87 b9       	out	0x07, r24	; 7
	DDRD &= ~((1<<PIND7) | (1<<PIND6) | (1<<PIND4));
 114:	8a b1       	in	r24, 0x0a	; 10
 116:	8f 72       	andi	r24, 0x2F	; 47
 118:	8a b9       	out	0x0a, r24	; 10
 11a:	08 95       	ret

0000011c <_ZN5Motor9directionEhh>:
}


void Motor::direction(uint8_t directionL, uint8_t directionR)
{
 11c:	fc 01       	movw	r30, r24
	/************************************************************************/
	/* Linker Motor                                                         */
	/************************************************************************/
	if (directionL == MOT_FWD)
 11e:	61 30       	cpi	r22, 0x01	; 1
 120:	39 f4       	brne	.+14     	; 0x130 <_ZN5Motor9directionEhh+0x14>
	{
		PORTC |= (1<<MOTOR_DIR_LA);
 122:	43 9a       	sbi	0x08, 3	; 8
		PORTC &= ~(1<<MOTOR_DIR_LB);
 124:	44 98       	cbi	0x08, 4	; 8
		Status.leftDir = MOT_FWD;
 126:	80 81       	ld	r24, Z
 128:	8c 7f       	andi	r24, 0xFC	; 252
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	80 83       	st	Z, r24
 12e:	0f c0       	rjmp	.+30     	; 0x14e <_ZN5Motor9directionEhh+0x32>
	}
	else if (directionL == MOT_REV)
 130:	62 30       	cpi	r22, 0x02	; 2
 132:	39 f4       	brne	.+14     	; 0x142 <_ZN5Motor9directionEhh+0x26>
	{
		PORTC |= (1<<MOTOR_DIR_LB);
 134:	44 9a       	sbi	0x08, 4	; 8
		PORTC &= ~(1<<MOTOR_DIR_LA);
 136:	43 98       	cbi	0x08, 3	; 8
		Status.leftDir = MOT_REV;
 138:	80 81       	ld	r24, Z
 13a:	8c 7f       	andi	r24, 0xFC	; 252
 13c:	82 60       	ori	r24, 0x02	; 2
 13e:	80 83       	st	Z, r24
 140:	06 c0       	rjmp	.+12     	; 0x14e <_ZN5Motor9directionEhh+0x32>
	}
	else
	{
		PORTC &= ~( (1<<MOTOR_DIR_LA) | (1<<MOTOR_DIR_LB) );
 142:	88 b1       	in	r24, 0x08	; 8
 144:	87 7e       	andi	r24, 0xE7	; 231
 146:	88 b9       	out	0x08, r24	; 8
		Status.leftDir = MOT_BREAK;
 148:	80 81       	ld	r24, Z
 14a:	8c 7f       	andi	r24, 0xFC	; 252
 14c:	80 83       	st	Z, r24
	}
	
	/************************************************************************/
	/* Rechter Motor                                                        */
	/************************************************************************/
	if (directionR == MOT_FWD)
 14e:	41 30       	cpi	r20, 0x01	; 1
 150:	39 f4       	brne	.+14     	; 0x160 <_ZN5Motor9directionEhh+0x44>
	{
		PORTC &= ~(1<<MOTOR_DIR_RB);
 152:	42 98       	cbi	0x08, 2	; 8
		PORTD |= (1<<MOTOR_DIR_RA);
 154:	5c 9a       	sbi	0x0b, 4	; 11
		Status.rightDir = MOT_FWD;
 156:	80 81       	ld	r24, Z
 158:	83 7f       	andi	r24, 0xF3	; 243
 15a:	84 60       	ori	r24, 0x04	; 4
 15c:	80 83       	st	Z, r24
 15e:	08 95       	ret
	}
	else if (directionR == MOT_REV)
 160:	42 30       	cpi	r20, 0x02	; 2
 162:	39 f4       	brne	.+14     	; 0x172 <_ZN5Motor9directionEhh+0x56>
	{
		PORTC |= (1<<MOTOR_DIR_RB);
 164:	42 9a       	sbi	0x08, 2	; 8
		PORTD &= ~(1<<MOTOR_DIR_RA);
 166:	5c 98       	cbi	0x0b, 4	; 11
		Status.rightDir = MOT_REV;
 168:	80 81       	ld	r24, Z
 16a:	83 7f       	andi	r24, 0xF3	; 243
 16c:	88 60       	ori	r24, 0x08	; 8
 16e:	80 83       	st	Z, r24
 170:	08 95       	ret
	}
	else
	{
		PORTC &= ~(1<<MOTOR_DIR_RB);
 172:	42 98       	cbi	0x08, 2	; 8
		PORTD &= ~(1<<MOTOR_DIR_RA);
 174:	5c 98       	cbi	0x0b, 4	; 11
		Status.rightDir = MOT_BREAK;
 176:	80 81       	ld	r24, Z
 178:	83 7f       	andi	r24, 0xF3	; 243
 17a:	80 83       	st	Z, r24
 17c:	08 95       	ret

0000017e <_ZN5MotorC1Ev>:
#define MOTOR_DIR_RB	PINC2
#define MOTOR_DIR_LA	PINC3
#define MOTOR_DIR_LB	PINC4

// Konstructor
Motor::Motor()
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	ec 01       	movw	r28, r24
{
	DDRC |= (1<<PINC2) | (1<<PINC3) | (1<<PINC4);
 184:	87 b1       	in	r24, 0x07	; 7
 186:	8c 61       	ori	r24, 0x1C	; 28
 188:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1<<PIND7) | (1<<PIND6) | (1<<PIND4);
 18a:	8a b1       	in	r24, 0x0a	; 10
 18c:	80 6d       	ori	r24, 0xD0	; 208
 18e:	8a b9       	out	0x0a, r24	; 10
	
	
	direction(MOT_BREAK, MOT_BREAK);
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	ce 01       	movw	r24, r28
 196:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN5Motor9directionEhh>
	
	// Motor PWM Treiber Timer2
	// Mode 3 Fast-PWM, Prescaler 8 f_pwm = 7812 HZ
	TCCR2A |= (1<<COM2A1) | (1<<COM0B1) | (1<<WGM21) | (1<<WGM20);
 19a:	e0 eb       	ldi	r30, 0xB0	; 176
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	83 6a       	ori	r24, 0xA3	; 163
 1a2:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22) | (1<<CS21) | (1<<CS20);
 1a4:	e1 eb       	ldi	r30, 0xB1	; 177
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	87 60       	ori	r24, 0x07	; 7
 1ac:	80 83       	st	Z, r24
	//TIMSK2 |= (1<<TOIE2);
	OCR2A = 0x00;
 1ae:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
	OCR2B = 0x00;
 1b2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f00b4>
	
	Status.deltaLeft = MOTOR_DIFF_L;
 1b6:	83 ef       	ldi	r24, 0xF3	; 243
 1b8:	8d 83       	std	Y+5, r24	; 0x05
}
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <_ZN5Motor5speedEii>:
	}
	
}

void Motor::speed(int16_t left, int16_t right)
{
 1c0:	fc 01       	movw	r30, r24
	
	Status.speedRight = right;
 1c2:	54 83       	std	Z+4, r21	; 0x04
 1c4:	43 83       	std	Z+3, r20	; 0x03
	Status.speedLeft = left + Status.deltaLeft;
 1c6:	85 81       	ldd	r24, Z+5	; 0x05
 1c8:	68 0f       	add	r22, r24
 1ca:	71 1d       	adc	r23, r1
 1cc:	87 fd       	sbrc	r24, 7
 1ce:	7a 95       	dec	r23
	
	if (Status.speedLeft  > 255)
 1d0:	6f 3f       	cpi	r22, 0xFF	; 255
 1d2:	71 05       	cpc	r23, r1
 1d4:	31 f0       	breq	.+12     	; 0x1e2 <_ZN5Motor5speedEii+0x22>
 1d6:	2c f0       	brlt	.+10     	; 0x1e2 <_ZN5Motor5speedEii+0x22>
	{
		Status.speedLeft  = 255;
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	92 83       	std	Z+2, r25	; 0x02
 1de:	81 83       	std	Z+1, r24	; 0x01
 1e0:	07 c0       	rjmp	.+14     	; 0x1f0 <_ZN5Motor5speedEii+0x30>
	}
	else if (Status.speedLeft  < 0)
 1e2:	77 23       	and	r23, r23
 1e4:	1c f0       	brlt	.+6      	; 0x1ec <_ZN5Motor5speedEii+0x2c>

void Motor::speed(int16_t left, int16_t right)
{
	
	Status.speedRight = right;
	Status.speedLeft = left + Status.deltaLeft;
 1e6:	72 83       	std	Z+2, r23	; 0x02
 1e8:	61 83       	std	Z+1, r22	; 0x01
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <_ZN5Motor5speedEii+0x30>
	{
		Status.speedLeft  = 255;
	}
	else if (Status.speedLeft  < 0)
	{
		Status.speedLeft  = 0;
 1ec:	12 82       	std	Z+2, r1	; 0x02
 1ee:	11 82       	std	Z+1, r1	; 0x01
	}
	
	if (Status.speedRight > 255)
 1f0:	4f 3f       	cpi	r20, 0xFF	; 255
 1f2:	51 05       	cpc	r21, r1
 1f4:	31 f0       	breq	.+12     	; 0x202 <_ZN5Motor5speedEii+0x42>
 1f6:	2c f0       	brlt	.+10     	; 0x202 <_ZN5Motor5speedEii+0x42>
	{
		Status.speedRight = 255;
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	94 83       	std	Z+4, r25	; 0x04
 1fe:	83 83       	std	Z+3, r24	; 0x03
 200:	04 c0       	rjmp	.+8      	; 0x20a <_ZN5Motor5speedEii+0x4a>
	}
	else if (Status.speedRight < 0)
 202:	55 23       	and	r21, r21
 204:	14 f4       	brge	.+4      	; 0x20a <_ZN5Motor5speedEii+0x4a>
	{
		Status.speedRight = 0;
 206:	14 82       	std	Z+4, r1	; 0x04
 208:	13 82       	std	Z+3, r1	; 0x03
	}
	
	// Set Left Motor Speed
	OCR2A = (uint8_t)Status.speedLeft;
 20a:	81 81       	ldd	r24, Z+1	; 0x01
 20c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
	OCR2B = (uint8_t)Status.speedRight;
 210:	83 81       	ldd	r24, Z+3	; 0x03
 212:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f00b4>
 216:	08 95       	ret

00000218 <__tablejump2__>:
 218:	ee 0f       	add	r30, r30
 21a:	ff 1f       	adc	r31, r31
 21c:	05 90       	lpm	r0, Z+
 21e:	f4 91       	lpm	r31, Z
 220:	e0 2d       	mov	r30, r0
 222:	09 94       	ijmp

00000224 <__do_global_dtors>:
 224:	10 e0       	ldi	r17, 0x00	; 0
 226:	cf e3       	ldi	r28, 0x3F	; 63
 228:	d0 e0       	ldi	r29, 0x00	; 0
 22a:	04 c0       	rjmp	.+8      	; 0x234 <__do_global_dtors+0x10>
 22c:	fe 01       	movw	r30, r28
 22e:	0e 94 0c 01 	call	0x218	; 0x218 <__tablejump2__>
 232:	21 96       	adiw	r28, 0x01	; 1
 234:	c0 34       	cpi	r28, 0x40	; 64
 236:	d1 07       	cpc	r29, r17
 238:	c9 f7       	brne	.-14     	; 0x22c <__do_global_dtors+0x8>
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
